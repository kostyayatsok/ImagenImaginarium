import argparse
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import pandas as pd

from src.multi_bot.config import TOKEN
from src.multi_bot import Geter
from src.multi_bot.gen_photo import shuffle

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

Gamers = {}
list_keys = {}

async def AddMe(msg : types.Message):
    if msg.text not in list_keys:
        list_keys[msg.text] = Geter.Game(base)
    elif list_keys[msg.text].isStart:
        await msg.reply("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.")
        return
 
    Game = list_keys[msg.text]
    Gamers[msg.chat.id] = Game
    Game.add_RealGamer(msg.chat.id, msg.chat.username, Game)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    if len(Game.List) <= 2:
        buttons = ["–î–∞"]
    keyboard.add(*buttons)
    Gamers[msg.chat.id].fl = 2
    await msg.reply("–°–µ–π—á–∞—Å –≤–∞—Å " + str(len(Game.List)) + ". –ñ–¥–µ–º –µ—â–µ?",
                    reply_markup=keyboard)

async def Finish(id : int):
    global list_keys, Gamers

    cur_Game = Gamers[id]
    del Gamers[id]
    if cur_Game not in Gamers.values():
        list_keys.remove(cur_Game)
    
    await bot.send_message(id, "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –µ—â–µ, –Ω–∞–ø–∏—à–∏ /start", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=['start'])
async def Start(msg: types.Message):
    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # buttons = ["–î–∞!", "–•–≤–∞—Ç–∏—Ç"]
    # keyboard.add(*buttons)

    if msg.chat.id in Gamers:
        if msg.chat.id in Gamers[msg.chat.id].List:
            Gamers[msg.chat.id].List.remove(msg.chat.id)
        del Gamers[msg.chat.id]

    await msg.answer(
"""
–ü—Ä–∏–≤–µ—Ç!
–Ø üí´Imagen Imaginarium botüí´
–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –≤ Imaginarium, –≥–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ–π (–ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞) –∏ —Å–æ–æ–±—â–∏ –µ–≥–æ –¥—Ä—É–∑—å—è–º.
"""
)

@dp.message_handler()
async def Main(msg: types.Message):
    f = 0
    if not msg.chat.id in Gamers:
        f = 1
    if f:
        await AddMe(msg)
        return
    if not msg.chat.id in Gamers:
        return
    Game = Gamers[msg.chat.id]
    print(msg.chat.id, msg.text, Game.fl, Game.List)
    if (msg.text == "–î–∞" and Game.fl == 2) or len(Game.List) < 3:
        await msg.answer(f"–í—Å–µ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ: {len(Game.List)}.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ '–ù–µ—Ç'.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–æ–º–µ '–ù–µ—Ç'.", reply_markup=types.ReplyKeyboardRemove())
    if (msg.text == "–ù–µ—Ç" and Game.fl == 2) or (Game.fl == 3 and msg.text == "–î–∞!"):
        for u in Game.List:
            await bot.send_message(u.id, "–ù–∞—á–∏–Ω–∞–µ–º", reply_markup=types.ReplyKeyboardRemove())
        Game.start()
        Game.fl = 0
        Game.ff3 = 1
    Game.go()

    if Game.stage_id == 0:
        Game.ff = Game.ff2 = 1
        if not Game.ff3 and msg.chat.id == Game.List[Game.lead].id and \
                msg.text[0].isdigit() and int(msg.text[0]) >= 1 and int(msg.text[0]) <= len(Game.List[Game.lead].MedGroup.media):
            Game.Gamers[msg.chat.id].set_imag(int(msg.text[0]), msg.text[2:])
            await msg.answer("–¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º")

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ["1", "2", "3", "4", "5", "6"]
            keyboard.add(*buttons)

            for u in Game.List:
                if u.id != Game.List[Game.lead].id:
                    await bot.send_media_group(u.id, media=Game.Gamers[u.id].MedGroup)
                    await bot.send_message(u.id,
                                           '–í–µ–¥—É—â–∏–π –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: "' + Game.List[
                                               Game.lead].text + '"'
                                           , reply_markup=keyboard)
        elif Game.ff3:
            Game.ff3 = 0
            for u in Game.List:
                if u.id != Game.List[Game.lead].id:
                    await bot.send_message(u.id, "–ñ–¥–µ–º –≤–µ–¥—É—â–µ–≥–æ... (@" + Game.List[Game.lead].name + ')')
            await bot.send_media_group(Game.List[Game.lead].id, media=Game.Gamers[Game.List[Game.lead].id].MedGroup)
            await bot.send_message(Game.List[Game.lead].id,
                                       "–¢—ã - –≤–µ–¥—É—â–∏–π. –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return
    Game.go()

    if Game.stage_id == 1:
        if msg.chat.id != Game.List[Game.lead].id:
            if msg.text.isdigit() and int(msg.text) >= 1 and int(msg.text) <= len(Game.Gamers[msg.chat.id].MedGroup.media):
                Game.Gamers[msg.chat.id].set_imag(int(msg.text), "-")
                await msg.answer("–°–µ—Ä—å–µ–∑–Ω–æ? " + msg.text + "? –ö–∞–∫ –∑–Ω–∞–µ—à—å...")
        else:
            await msg.answer("–ñ–¥–∏, –≤–µ–¥—É—â–∏–π")

    Game.go()

    if Game.stage_id == 2:
        if Game.ff:
            Game.ff = 0
            for u in Game.List:
                await bot.send_message(u.id, "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤—Å–µ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª–∏. –£—Ä–∞", reply_markup=types.ReplyKeyboardRemove())

                await bot.send_media_group(u.id, media=Game.all_map())
                if u.id != Game.List[Game.lead].id:
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    buttons = []
                    for i in range(len(Game.List)):
                        buttons.append(str(i + 1))
                    keyboard.add(*buttons)
                    await bot.send_message(u.id, "–£–≥–∞–¥–∞–π –∫–∞—Ä—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤–µ–¥—É—â–∏–π –∑–∞–≥–∞–¥–∞–ª –∫–∞–∫:\n"+Game.List[
                                               Game.lead].text, reply_markup=keyboard)
        elif msg.chat.id != Game.List[Game.lead].id and msg.text.isdigit() and int(msg.text) >= 1 and int(msg.text) <= len(Game.List):
            Game.Gamers[msg.chat.id].ans = int(msg.text) - 1
            await msg.answer("–û–∫, —Ç—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É " + msg.text)
    Game.go()

    if Game.stage_id == 3:
        if Game.ff2:
            Game.ff2 = 0
            for u in Game.List:
                await bot.send_message(u.id, Game.get_leader_board(), reply_markup=types.ReplyKeyboardRemove())
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ["–î–∞!", "–•–≤–∞—Ç–∏—Ç"]
            keyboard.add(*buttons)
            await bot.send_message(Game.get_lead_id(), "–ò–≥—Ä–∞–µ–º –µ—â–µ?", reply_markup=keyboard)
            Game.fl = 3
        elif msg.text == "–•–≤–∞—Ç–∏—Ç":
            for u in Game.List:
                await Finish(u.id)
            Game.fl = 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--images_path', type=str, default='Images',
                        help='where images are stored')
    parser.add_argument('--database_name', type=str, default='Database.csv',
                        help='where database is stored')

    args = parser.parse_args()
    base = pd.read_csv(args.database_name)
    base = shuffle(base)

    print("polling")
    executor.start_polling(dp, skip_updates=True)